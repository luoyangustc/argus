set(structure_vcs_LINKER_LIBS)

set(structure_vcs_INSTALL_INCLUDE_PREFIX include)
set(structure_vcs_INSTALL_LIB_PREFIX lib)
set(structure_vcs_INSTALL_BIN_PREFIX bin)

find_package(RapidJSON QUIET)
if (NOT RapidJSON_FOUND)
  message(STATUS "Can't find rapidjson library, build it from source")
  download_external("${PROJECT_SOURCE_DIR}/cmake/external/DownloadRapidJSON.cmake"
                    "${CMAKE_BINARY_DIR}/rapidjson-download")
  find_package(RapidJSON REQUIRED QUIET)
endif ()
include_directories(SYSTEM ${RapidJSON_INCLUDE_DIRS})
message(STATUS "Found RapidJSON: ${RapidJSON_INCLUDE_DIRS} (found version ${RapidJSON_VERSION})")

find_package(Protobuf REQUIRED QUIET)
if (Protobuf_FOUND)
  include(cmake/ProtoBuf.cmake)
  include_directories(SYSTEM ${Protobuf_INCLUDE_DIRS})
  list(APPEND structure_vcs_LINKER_LIBS ${Protobuf_LIBRARIES})
  message(STATUS "Found Protobuf: ${Protobuf_INCLUDE_DIRS}, ${Protobuf_LIBRARIES} (found version ${Protobuf_VERSION})")
  message(STATUS "Found Protoc: ${Protoc_EXECUTABLE} (found version ${Protoc_VERSION})")
  add_definitions(-DUSE_Protobuf)
endif ()

# find_package(GTest QUIET)
# if (NOT GTest_FOUND)
#   message(STATUS "Can't find gtest library, build it from source")
#   download_external("${PROJECT_SOURCE_DIR}/cmake/external/DownloadGTest.cmake"
#                     "${CMAKE_BINARY_DIR}/gtest-download")
#   find_package(GTest REQUIRED QUIET)
# endif ()
# include_directories(SYSTEM ${GTEST_INCLUDE_DIRS})

if (UNIX)
  if (NOT APPLE AND NOT ANDROID)
    find_package(Threads QUIET)
    if (CMAKE_THREAD_LIBS_INIT)
      list(APPEND structure_vcs_LINKER_LIBS ${CMAKE_THREAD_LIBS_INIT})
    else ()
      message(FATAL_ERROR "Could not find threads")
    endif ()
  endif ()
endif ()