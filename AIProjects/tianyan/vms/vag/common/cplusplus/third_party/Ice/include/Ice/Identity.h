// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Identity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Ice_Identity_h__
#define __Ice_Identity_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_API
#   ifdef ICE_API_EXPORTS
#       define ICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace Ice
{

struct Identity
{
    ::std::string name;
    ::std::string category;

    bool operator==(const Identity& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(category != __rhs.category)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Identity& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(category < __rhs.category)
        {
            return true;
        }
        else if(__rhs.category < category)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Identity& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Identity& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Identity& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Identity& __rhs) const
    {
        return !operator<(__rhs);
    }

    ICE_API void __write(::IceInternal::BasicStream*) const;
    ICE_API void __read(::IceInternal::BasicStream*);
};

typedef ::std::map< ::Ice::Identity, ::Ice::ObjectPtr> ObjectDict;

typedef ::std::vector< ::Ice::Identity> IdentitySeq;
ICE_API void __writeIdentitySeq(::IceInternal::BasicStream*, const ::Ice::Identity*, const ::Ice::Identity*);
ICE_API void __readIdentitySeq(::IceInternal::BasicStream*, IdentitySeq&);

}

#endif
