package utility

import (
	"context"
	"encoding/json"
	"testing"
)

type mockOcrSariVat struct{}

func (mot mockOcrSariVat) SariVatPostProcessEval(
	ctx context.Context, req _EvalOcrSariVatPostProcessReq, env _EvalEnv,
) (ret _EvalOcrSariVatPostProcessResp, err error) {
	var str = `
		{
			"code": 0,
			"message": "",
			"result": {
			}
		}
	`

	err = json.Unmarshal([]byte(str), &ret)
	return
}

func (mot mockOcrSariVat) SariVatDetectEval(
	ctx context.Context, req _EvalOcrSariVatDetectReq, env _EvalEnv,
) (ret _EvalOcrSariVatDetectResp, err error) {
	str := `
		{
			"code": 0,
			"message": "",
			"result": {	
				"bboxes":[[[481.31062779682463, 1336.358600954711], [481.0667565635224, 1296.083089711243], [970.1305126184075, 1294.258479926097], [970.4166410274898, 1334.519660342293]], [[2076.4083199550155, 357.74501946503887], [2075.9609194524037, 310.6747303824687], [2392.292780198196, 309.7177249846741], [2392.7721591633544, 356.777190820414]], [[2216.928562512869, 238.3804031341013], [1839.6482012955942, 234.47996071875332], [1839.3940446767792, 165.40504941015027], [2217.615868741174, 169.32534611513032]], [[1706.017879476285, 1168.8212969168587], [1704.6417567511596, 1125.5979382219466], [1976.64408123618, 1118.5856013609655], [1978.0450091068037, 1161.7992838514526]], [[2229.893844346498, 233.1208836132446], [2229.5295103909634, 196.08873758240117], [2431.0261060456046, 195.49571083623647], [2431.40646910838, 232.5224337611273]], [[482.02419370635357, 1454.2045290005449], [481.7862982250457, 1414.9159175376622], [1155.3334495438078, 1412.3454456368443], [1155.628094210311, 1451.6147993073866]], [[1160.6148817616352, 1448.5745959918195], [1160.3803407120997, 1417.3604730799866], [1441.8347795229483, 1416.2853327608132], [1442.088156698262, 1447.4930592182184]], [[2016.3225638337015, 763.961047273642], [2016.00301809626, 729.8480535584271], [2095.927221195229, 729.582137211481], [2096.2526184287876, 763.6931474802338]], [[318.59894952480727, 339.135687791902], [318.5672546054055, 258.9275726951294], [538.6520451608667, 259.4467804600549], [538.721841927387, 339.6424879351297]], [[691.1673285275945, 772.4201206497153], [689.9111656189231, 733.2558655455784], [898.070623459142, 729.5512135587652], [899.3439913850387, 768.7090376075038]], [[483.37495503601247, 1511.6343886536904], [483.1369162586484, 1472.3361040702257], [1245.9328394272945, 1469.3935146271376], [1246.235150662667, 1508.6699816473997]], [[102.24990190318107, 770.3764022148735], [103.0409116531611, 730.1847811276667], [206.2350165147154, 731.8510246560163], [205.4530649650269, 772.0399818065799]], [[735.4108523385306, 1256.8850452110173], [735.0520555997222, 1202.543176607365], [1261.8864942652592, 1200.6127539285983], [1262.3067093876323, 1254.9337929643107]], [[1051.7177849694042, 764.0311158679835], [1051.5077034335973, 735.2155944797221], [1094.9281855689414, 735.0710624445674], [1095.14095430275, 763.8856742505537]], [[1341.0579058121207, 761.4055681894401], [1340.8799653734584, 738.9199875258073], [1366.7819807212395, 738.8336814772766], [1366.9611717855046, 761.3188386475717]], [[1405.536888753155, 764.0004728413211], [1405.2863268824003, 732.8836975401259], [1620.2512014798265, 732.1683311379101], [1620.5161241239823, 763.2802424452948]], [[478.76529715086946, 585.356533837434], [478.5342019741465, 547.2181562690527], [1331.7935606106557, 544.494527060955], [1332.0945633010715, 582.6092661849301]], [[2296.0274949928607, 762.0203422396662], [2295.697476225201, 728.9174802691996], [2437.499460162493, 728.4456899466657], [2437.839550797203, 761.5451364060177]], [[534.8201919790022, 1396.5828304726915], [534.584089272217, 1358.3124658204542], [1062.7483593401553, 1356.3182551099449], [1063.027816966375, 1394.573911279675]], [[479.02423114895254, 462.9313637913562], [478.79317580196346, 424.81312192264875], [886.9400066263773, 423.5462490209123], [887.204503319042, 461.65319256698893]], [[1808.4613415380497, 764.657731127953], [1808.1480659344047, 729.5361801967982], [1976.0281538856177, 728.9777465560126], [1976.3540850025358, 764.0950087387749]], [[1048.8101779899841, 374.89609724324384], [1048.3203831931496, 126.43226244852244], [1435.9105673531253, 127.38347867672307], [1436.6081506457542, 375.7795846053724]], [[517.4086426254374, 521.0032263465177], [517.1744122688335, 482.8764800375143], [1044.3559973905947, 481.21805888107883], [1044.6334214831666, 519.3302063079333]], [[1487.1279402249343, 1566.148952019911], [1486.7474046918592, 1519.8200431339526], [1629.9576326918016, 1519.2622948472022], [1630.3523883522557, 1565.5863707408125]], [[480.1435624523713, 647.592493304007], [479.90623851204776, 608.4400933427963], [1146.2850963526473, 606.2836379153008], [1146.5784684104583, 645.4170833351636]], [[1157.5727399960442, 644.3776746008402], [1157.3237174116996, 611.2647378172542], [1433.2920927435887, 610.3706854413003], [1433.5607419394253, 643.4769801985282]], [[2200.08975628071, 1167.0216544537604], [2198.6685551522432, 1123.8138384923623], [2435.4948066115016, 1116.930527302179], [2436.9479005842836, 1161.134587389156]], [[1978.8470794375423, 1248.257975279611], [1977.4458170498572, 1205.0282800400103], [2277.3783566479965, 1197.8969195246602], [2278.8069660919336, 1241.1160548182709]], [[1076.8353180689576, 390.99863625283615], [1076.6072621553485, 278.7505898644824], [1398.3751017853463, 279.5055709186224], [1398.6810645765981, 391.72821436396333]], [[237.93332081781617, 378.46425983506805], [237.64924624762634, 327.2165722002125], [310.5028298116727, 326.9955912833697], [310.79493467885067, 378.2405684892196]], [[1517.0787172301289, 467.70066072138263], [1516.7543325548625, 428.60752811371344], [2350.5745944023192, 427.0168980273259], [2350.9588581741064, 465.0846424833681]], [[1519.4934049229007, 517.8233532545964], [1519.1687823056861, 478.7218338566779], [2355.0624241957166, 476.0928618919511], [2355.4572194000366, 515.1706247235478]], [[1516.8696497308931, 562.9582893304837], [1516.553534007376, 524.8518010032252], [2351.535372030176, 522.1979686920262], [2351.9197934224394, 560.2813280888413]], [[1518.268595346415, 611.0985044966019], [1517.9273663150177, 569.9753788032066], [2353.9871684638188, 567.2909547339057], [2354.4021983275443, 608.3890857432525]], [[2199.481920078645, 286.2702811270902], [2199.071055554114, 244.22368488864996], [2430.5220949877053, 243.53448839064487], [2430.95386247454, 285.57401118754194]], [[328.56424154508716, 238.90362838506783], [328.5383455613745, 176.76725640580156], [756.5582566068432, 177.80190901361993], [756.6415586295159, 239.91959146233546]], [[887.5499276065528, 201.1580560719039], [886.4252506867832, 124.03206535247429], [1599.6575509188806, 122.78071165869953], [1600.899884193124, 199.86703445475015]]]
			}
		}
	`
	err = json.Unmarshal([]byte(str), &ret)
	return
}

func (mot mockOcrSariVat) SariVatRecognizeEval(
	ctx context.Context, req _EvalOcrSariVatRecogReq, env _EvalEnv,
) (ret _EvalOcrSariVatRecogResp, err error) {
	str := `
		{
			"code": 0,
			"message": "",
			"result": {
				"text":[]
			}
		}
	`
	err = json.Unmarshal([]byte(str), &ret)
	return
}

func TestOcrSariVat(t *testing.T) {
	service, ctx := getMockContext(t)
	service.iOcrSariVat = mockOcrSariVat{}
	ctx.Exec(`
		post http://argus.ava.ai/v1/ocr/vat
		auth |authstub -uid 1 -utype 4|
		json '{
			"data": {
				"uri": "http://pbqb5ctvq.bkt.clouddn.com/YBZZS_01488003.jpg"  
			}   
		}'
		ret 200
		header Content-Type $(mime) 
		equal $(mime) 'application/json'
		echo $(resp.body)
		json '{
			"code": $(code),
			"message": $(msg),
			"result":{
				"bboxes": $(bboxes),
				"res": $(res)
			}	
		}'
		equal $(code) 0
	`)
}
