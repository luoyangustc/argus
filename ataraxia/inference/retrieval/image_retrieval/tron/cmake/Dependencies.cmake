set(Tron_LINKER_LIBS)

find_os_arch(Tron_Platform Tron_Arch)

set(Tron_INSTALL_INCLUDE_PREFIX include)
set(Tron_INSTALL_LIB_PREFIX lib/${Tron_Platform}/${Tron_Arch})
set(Tron_INSTALL_BIN_PREFIX bin)

if (${USE_CUDA})
  find_package(CUDA QUIET)
  if (CUDA_FOUND)
    include_directories(SYSTEM ${CUDA_TOOLKIT_INCLUDE})
    list(APPEND Tron_LINKER_LIBS ${CUDA_CUDART_LIBRARY} ${CUDA_cublas_LIBRARY})
    message(STATUS "Found CUDA: ${CUDA_TOOLKIT_ROOT_DIR} (found version ${CUDA_VERSION})")
    add_definitions(-DUSE_CUDA)
    if (${USE_CUDNN})
      find_package(CUDNN QUIET)
      if (CUDNN_FOUND)
        include_directories(SYSTEM ${CUDNN_INCLUDE_DIRS})
        list(APPEND Tron_LINKER_LIBS ${CUDNN_LIBRARIES})
        message(STATUS "Found CUDNN: ${CUDNN_INCLUDE_DIRS}, ${CUDNN_LIBRARIES} (found version ${CUDNN_VERSION})")
        add_definitions(-DUSE_CUDNN)
      else ()
        message(WARNING "Could not find CUDNN, disable it")
        set(USE_CUDNN OFF)
      endif ()
    endif ()
  else ()
    message(WARNING "Could not find CUDA, using CPU")
    set(USE_CUDA OFF)
  endif ()
endif ()

find_package(shadow QUIET)
if (NOT shadow_FOUND)
  message(STATUS "Can't find shadow library, build it from source")
  download_external("${PROJECT_SOURCE_DIR}/cmake/external/DownloadShadow.cmake"
                    "${CMAKE_BINARY_DIR}/shadow-download")
  find_package(shadow REQUIRED QUIET)
endif ()
include_directories(SYSTEM ${shadow_INCLUDE_DIRS})
list(APPEND Tron_LINKER_LIBS ${shadow_LIBRARIES})
message(STATUS "Found Shadow: ${shadow_INCLUDE_DIRS}, ${shadow_LIBRARIES}")
install(FILES ${shadow_LIBRARIES} DESTINATION ${Tron_INSTALL_LIB_PREFIX})

find_package(RapidJSON QUIET)
if (NOT RapidJSON_FOUND)
  message(STATUS "Can't find rapidjson library, build it from source")
  download_external("${PROJECT_SOURCE_DIR}/cmake/external/DownloadRapidJSON.cmake"
                    "${CMAKE_BINARY_DIR}/rapidjson-download")
  find_package(RapidJSON REQUIRED QUIET)
endif ()
include_directories(SYSTEM ${RapidJSON_INCLUDE_DIRS})
message(STATUS "Found RapidJSON: ${RapidJSON_INCLUDE_DIRS} (found version ${RapidJSON_VERSION})")
add_definitions(-DUSE_JSON)

find_package(Protobuf REQUIRED QUIET)
if (Protobuf_FOUND)
  include(cmake/ProtoBuf.cmake)
  include_directories(SYSTEM ${Protobuf_INCLUDE_DIRS})
  message(STATUS "Found Protobuf: ${Protobuf_INCLUDE_DIRS}, ${Protobuf_LIBRARIES} (found version ${Protobuf_VERSION})")
  message(STATUS "Found Protoc: ${Protoc_EXECUTABLE} (found version ${Protoc_VERSION})")
  list(APPEND Tron_LINKER_LIBS ${Protobuf_LIBRARIES})
  add_definitions(-DUSE_Protobuf)
endif ()

if (${USE_OpenCV})
  find_package(OpenCV PATHS ${OpenCV_DIR} NO_DEFAULT_PATH QUIET COMPONENTS core highgui imgproc imgcodecs videoio)
  if (NOT OpenCV_FOUND) # if not OpenCV 3.x, then try to find OpenCV 2.x in default path
    find_package(OpenCV REQUIRED QUIET COMPONENTS core highgui imgproc)
  endif ()
  if (${OpenCV_VERSION} VERSION_GREATER "2.4.13")
    find_package(OpenCV REQUIRED QUIET COMPONENTS core highgui imgproc imgcodecs videoio)
  endif ()
  include_directories(SYSTEM ${OpenCV_INCLUDE_DIRS})
  list(APPEND Tron_LINKER_LIBS ${OpenCV_LIBS})
  message(STATUS "Found OpenCV: ${OpenCV_CONFIG_PATH} (found version ${OpenCV_VERSION})")
  add_definitions(-DUSE_OpenCV)
endif ()

if (UNIX)
  if (NOT APPLE AND NOT ANDROID)
    find_package(Threads QUIET)
    if (CMAKE_THREAD_LIBS_INIT)
      list(APPEND Tron_LINKER_LIBS ${CMAKE_THREAD_LIBS_INIT})
    else ()
      message(FATAL_ERROR "Could not find threads")
    endif ()
  endif ()
endif ()
