cmake_minimum_required(VERSION 3.6.3 FATAL_ERROR)

project(sdk CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (NOT CMAKE_BUILD_TYPE)
  message(STATUS "Build type not set - defaulting to Release")
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build from: Release Debug." FORCE)
endif ()

set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -fPIC -O0 -Wall -Wextra -Wshadow -Wnon-virtual-dtor -pedantic -Wno-unused-parameter -Wno-unused-local-typedef -Wno-missing-braces -g")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -fPIC -O3 -Wall -Wextra -Wshadow -Wnon-virtual-dtor -pedantic -Wno-unused-parameter -Wno-unused-local-typedef -Wno-missing-braces -fno-omit-frame-pointer")

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Wno-shadow)
    add_definitions(-Wno-pedantic)
endif()

include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)
include(cmake/utils.cmake)

set(AISDK_SOURCE_DIR ${PROJECT_SOURCE_DIR})
find_os_arch(Tron_Platform Tron_Arch)

set(Tron_INSTALL_INCLUDE_PREFIX include)
set(Tron_INSTALL_LIB_PREFIX lib/${Tron_Platform}/${Tron_Arch})
set(Tron_INSTALL_BIN_PREFIX bin)

find_package(Protobuf REQUIRED QUIET)
if (Protobuf_FOUND)
  include(cmake/ProtoBuf.cmake)
  include_directories(SYSTEM ${Protobuf_INCLUDE_DIRS})
  message(STATUS "Found Protobuf: ${Protobuf_INCLUDE_DIRS}, ${Protobuf_LIBRARIES} (found version ${Protobuf_VERSION})")
  message(STATUS "Found Protoc: ${Protoc_EXECUTABLE} (found version ${Protoc_VERSION})")
  list(APPEND Tron_LINKER_LIBS ${Protobuf_LIBRARIES})
  add_definitions(-DUSE_Protobuf)
endif ()

find_package(cppzmq QUIET)
if (NOT cppzmq_FOUND)
  fetch_external(cppzmq ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR}/third_party/cppzmq)
endif ()
add_library(cppzmq INTERFACE)
target_include_directories(cppzmq INTERFACE third_party/cppzmq/include)
include_directories(SYSTEM ${cppzmq_INCLUDE_DIRS})

find_package(rapidjson QUIET)
if (NOT rapidjson_FOUND)
  fetch_external(rapidjson ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR}/third_party/rapidjson)
endif ()
add_library(rapidjson INTERFACE)
target_include_directories(rapidjson INTERFACE third_party/rapidjson/include)
include_directories(SYSTEM ${rapidjson_INCLUDE_DIRS})

option(USE_CUDA "Use CUDA" ON)
option(USE_CUDNN "Use CUDNN for acceleration" ON)
option(USE_OpenCV "Use OpenCV to read, write and show image" ON)
option(BUILD_SHARED_LIBS "Build shared library" ON)

if (${USE_CUDA})
  find_package(CUDA QUIET)
  if (CUDA_FOUND)
    include_directories(SYSTEM ${CUDA_TOOLKIT_INCLUDE})
    list(APPEND Tron_LINKER_LIBS ${CUDA_CUDART_LIBRARY} ${CUDA_cublas_LIBRARY})
    message(STATUS "Found CUDA: ${CUDA_TOOLKIT_ROOT_DIR} (found version ${CUDA_VERSION})")
    add_definitions(-DUSE_CUDA)
    if (${USE_CUDNN})
      find_package(CUDNN QUIET)
      if (CUDNN_FOUND)
        include_directories(SYSTEM ${CUDNN_INCLUDE_DIRS})
        list(APPEND Tron_LINKER_LIBS ${CUDNN_LIBRARIES})
        message(STATUS "Found CUDNN: ${CUDNN_INCLUDE_DIRS}, ${CUDNN_LIBRARIES} (found version ${CUDNN_VERSION})")
        add_definitions(-DUSE_CUDNN)
      else ()
        message(WARNING "Could not find CUDNN, disable it")
        set(USE_CUDNN OFF)
      endif ()
    endif ()
  else ()
    message(STATUS "Could not find CUDA, using CPU")
    set(USE_CUDA OFF)
  endif ()
endif ()

if (${USE_OpenCV})
  find_package(OpenCV PATHS ${OpenCV_DIR} NO_DEFAULT_PATH QUIET COMPONENTS core highgui imgproc imgcodecs videoio)
  if (NOT OpenCV_FOUND) # if not OpenCV 3.x, then try to find OpenCV 2.x in default path
    find_package(OpenCV REQUIRED QUIET COMPONENTS core highgui imgproc)
  endif ()
  if (${OpenCV_VERSION} VERSION_GREATER "2.4.13")
    find_package(OpenCV REQUIRED QUIET COMPONENTS core highgui imgproc imgcodecs videoio)
  endif ()
  include_directories(SYSTEM ${OpenCV_INCLUDE_DIRS})
  list(APPEND Tron_LINKER_LIBS ${OpenCV_LIBS})
  message(STATUS "Found OpenCV: ${OpenCV_CONFIG_PATH} (found version ${OpenCV_VERSION})")
  add_definitions(-DUSE_OpenCV)
endif ()

OPTION (CPU "Only CPU" OFF)
if (CPU)
    add_definitions(-DCPU_ONLY)
endif()
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    include_directories(BEFORE "${PROJECT_SOURCE_DIR}/third_party/for_osx/include")
    add_definitions(-DCPU_ONLY) # 让caffe不依赖cublas等库
    set(CMAKE_MACOSX_RPATH 0)
endif()

set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "Suppressing benchmark's tests" FORCE)
add_subdirectory(third_party/benchmark)
include_directories(third_party/benchmark/include)
add_subdirectory(third_party/googletest)
include_directories(third_party/googletest/googletest/include)
include_directories(third_party/googletest/googlemock/include)
include_directories(third_party/pprint)
include_directories(third_party/GSL/include)

OPTION (COVERAGE "Enable gcda file generation needed by lcov" OFF)

if (COVERAGE)
    target_compile_options(unit_tests PRIVATE --coverage)
    target_link_libraries(unit_tests PRIVATE --coverage)
endif()

enable_testing()

add_subdirectory(src/proto)
add_subdirectory(src/common)
add_subdirectory(src/framework)

option (APP "Only build some app")
if (APP) 
  add_subdirectory(src/app/${APP})
# else ()
#   file(GLOB apps src/app/*)
#   foreach(app ${apps})
#     add_subdirectory(${app})
#   endforeach()
endif ()
