#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""docker-build.

Usage:
  docker-build ([-f | --file string]) PATH ([-t | --tag list])
  docker-build (-h | --help)
  docker-build --version

Options:
  -h --help          Show this screen.
  --version          Show version.
  -f, --file string  Name of the Dockerfile (Default is 'PATH/template.Dockerfile')
  -t, --tag list     Name and optionally a tag in the 'name:tag' format

"""
import os
import re
import subprocess
from docopt import docopt
from jinja2 import Template

DOCKERFILES = os.path.join(os.path.abspath(
    os.path.dirname(__file__)), '../resource/dockerfiles')


def read_lines(name):
    '''read lines from file'''
    with open(name) as file_:
        return file_.readlines()


def write_lines(name, lines):
    '''write lines to file'''
    with open(name, 'w') as file_:
        file_.writelines(lines)


class RunCmdException(Exception):
    '''RunCmdException'''
    pass


def formatLines(lines0, caches):
    lines = []
    for line in lines0:
        ret = re.search(r'#TEMPLATE (.*) as (.*)', line.strip(), re.M | re.I)
        ret1 = re.search(r'#TEMPLATE (.*)', line.strip(), re.M | re.I)
        if ret:
            name = ret.group(1)
            stage = ret.group(2)

            lines2 = read_lines(os.path.join(DOCKERFILES, name, "Dockerfile"))
            index = 0
            while index < len(lines2):
                line = lines2[index]
                index += 1
                if line.startswith("FROM "):
                    lines.append("{0} as {1}\n".format(line.strip(), stage))
                    break
                else:
                    lines.append(line)
            if index < len(lines2):
                lines = lines + lines2[index:]
            lines[-1] = lines[-1] if lines[-1][-1] == "\n" else lines[-1] + "\n"
            lines.append("#" * 80 + "\n")

            tag_file = os.path.join(DOCKERFILES, name, "tag")
            if os.path.exists(tag_file):
                caches.append(read_lines(tag_file)[0].strip())
        elif ret1:
            name = ret1.group(1)

            lines2 = read_lines(
                os.path.join(DOCKERFILES, name, "Dockerfile.part"))
            lines = lines + lines2
            lines[-1] = lines[-1] if lines[-1][-1] == "\n" else lines[-1] + "\n"
        else:
            lines.append(line)
    return lines, caches


def main(arg):
    '''
Dockerfile.template.example

=> x1
==> Dockerfile
FROM base1
RUN ls

==> tag
x1_name::x1_tag

=> x2
==> Dockerfile
FROM base2
RUN ls

=> .
==> Dockerfile.template
#TEMPLATE x1 as x1
#TEMPLATE x2 as x2

FROM x3 as x3
RUN ls

FROM base

COPY --from=x1 aa aa
COPY --from=x2 bb bb
COPY --from=x3 cc cc

==> Dockerfile
FROM base1 as x1
RUN ls

FROM base2 as x2
RUN ls

FROM x3 as x3
RUN ls

FROM base

COPY --from=x1 aa aa
COPY --from=x2 bb bb
COPY --from=x3 cc cc

=> docker build
docker build
    -f Dockerfile .
    --cache-from x1_name::x1_tag
    --cache-from final::laster
    --tag final::laster

'''
    path = arg['PATH']
    tfile = arg['--file'][0] if arg['--file'] \
        else os.path.join(path, 'template.Dockerfile')

    lines = read_lines(tfile)
    caches = []
    while 1:
        lines1, caches = formatLines(lines, caches)
        if len(lines) == len(lines1):
            break
        lines = lines1

    write_lines(os.path.join(path, "Dockerfile"), lines)

    cmd = Template(r'''docker build {{ path }} \
    -f {{ path }}/Dockerfile{% for cache in caches %} \ 
    --cache-from {{ cache }}{% endfor %}{% for tag in tags %} \
    --tag {{ tag }}{% endfor %}
''').render(path=path, caches=caches, tags=arg['--tag'])

    print cmd
    # return

    process = subprocess.Popen(cmd, shell=True, executable='/bin/bash')
    process.wait()
    if process.returncode != 0:
        raise RunCmdException()


if __name__ == '__main__':

    DOCKERFILES = os.environ.get('DOCKERFILES', DOCKERFILES)
    # os.chdir(os.path.dirname(os.path.realpath(__file__)))
    main(docopt(__doc__, version='0.5'))
