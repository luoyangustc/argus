// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forward.proto

#ifndef PROTOBUF_INCLUDED_forward_2eproto
#define PROTOBUF_INCLUDED_forward_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_forward_2eproto 

namespace protobuf_forward_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_forward_2eproto
namespace tron {
namespace terror_mixup {
class ForwardRequest;
class ForwardRequestDefaultTypeInternal;
extern ForwardRequestDefaultTypeInternal _ForwardRequest_default_instance_;
class ForwardRequest_ForwardData;
class ForwardRequest_ForwardDataDefaultTypeInternal;
extern ForwardRequest_ForwardDataDefaultTypeInternal _ForwardRequest_ForwardData_default_instance_;
class ForwardRequests;
class ForwardRequestsDefaultTypeInternal;
extern ForwardRequestsDefaultTypeInternal _ForwardRequests_default_instance_;
class ForwardResponse;
class ForwardResponseDefaultTypeInternal;
extern ForwardResponseDefaultTypeInternal _ForwardResponse_default_instance_;
class ForwardResponses;
class ForwardResponsesDefaultTypeInternal;
extern ForwardResponsesDefaultTypeInternal _ForwardResponses_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_Confidences;
class Response_ConfidencesDefaultTypeInternal;
extern Response_ConfidencesDefaultTypeInternal _Response_Confidences_default_instance_;
}  // namespace terror_mixup
}  // namespace tron
namespace google {
namespace protobuf {
template<> ::tron::terror_mixup::ForwardRequest* Arena::CreateMaybeMessage<::tron::terror_mixup::ForwardRequest>(Arena*);
template<> ::tron::terror_mixup::ForwardRequest_ForwardData* Arena::CreateMaybeMessage<::tron::terror_mixup::ForwardRequest_ForwardData>(Arena*);
template<> ::tron::terror_mixup::ForwardRequests* Arena::CreateMaybeMessage<::tron::terror_mixup::ForwardRequests>(Arena*);
template<> ::tron::terror_mixup::ForwardResponse* Arena::CreateMaybeMessage<::tron::terror_mixup::ForwardResponse>(Arena*);
template<> ::tron::terror_mixup::ForwardResponses* Arena::CreateMaybeMessage<::tron::terror_mixup::ForwardResponses>(Arena*);
template<> ::tron::terror_mixup::Response* Arena::CreateMaybeMessage<::tron::terror_mixup::Response>(Arena*);
template<> ::tron::terror_mixup::Response_Confidences* Arena::CreateMaybeMessage<::tron::terror_mixup::Response_Confidences>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tron {
namespace terror_mixup {

// ===================================================================

class Response_Confidences : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.Response.Confidences) */ {
 public:
  Response_Confidences();
  virtual ~Response_Confidences();

  Response_Confidences(const Response_Confidences& from);

  inline Response_Confidences& operator=(const Response_Confidences& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response_Confidences(Response_Confidences&& from) noexcept
    : Response_Confidences() {
    *this = ::std::move(from);
  }

  inline Response_Confidences& operator=(Response_Confidences&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_Confidences& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_Confidences* internal_default_instance() {
    return reinterpret_cast<const Response_Confidences*>(
               &_Response_Confidences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Response_Confidences* other);
  friend void swap(Response_Confidences& a, Response_Confidences& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response_Confidences* New() const final {
    return CreateMaybeMessage<Response_Confidences>(NULL);
  }

  Response_Confidences* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response_Confidences>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response_Confidences& from);
  void MergeFrom(const Response_Confidences& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_Confidences* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string class = 3;
  void clear_class_();
  static const int kClassFieldNumber = 3;
  const ::std::string& class_() const;
  void set_class_(const ::std::string& value);
  #if LANG_CXX11
  void set_class_(::std::string&& value);
  #endif
  void set_class_(const char* value);
  void set_class_(const char* value, size_t size);
  ::std::string* mutable_class_();
  ::std::string* release_class_();
  void set_allocated_class_(::std::string* class_);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.Response.Confidences)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr class__;
  ::google::protobuf::int32 index_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Confidences Confidences;

  // accessors -------------------------------------------------------

  // repeated .tron.terror_mixup.Response.Confidences confidences = 2;
  int confidences_size() const;
  void clear_confidences();
  static const int kConfidencesFieldNumber = 2;
  ::tron::terror_mixup::Response_Confidences* mutable_confidences(int index);
  ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::Response_Confidences >*
      mutable_confidences();
  const ::tron::terror_mixup::Response_Confidences& confidences(int index) const;
  ::tron::terror_mixup::Response_Confidences* add_confidences();
  const ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::Response_Confidences >&
      confidences() const;

  // string checkpoint = 1;
  void clear_checkpoint();
  static const int kCheckpointFieldNumber = 1;
  const ::std::string& checkpoint() const;
  void set_checkpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_checkpoint(::std::string&& value);
  #endif
  void set_checkpoint(const char* value);
  void set_checkpoint(const char* value, size_t size);
  ::std::string* mutable_checkpoint();
  ::std::string* release_checkpoint();
  void set_allocated_checkpoint(::std::string* checkpoint);

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::Response_Confidences > confidences_;
  ::google::protobuf::internal::ArenaStringPtr checkpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardRequest_ForwardData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.ForwardRequest.ForwardData) */ {
 public:
  ForwardRequest_ForwardData();
  virtual ~ForwardRequest_ForwardData();

  ForwardRequest_ForwardData(const ForwardRequest_ForwardData& from);

  inline ForwardRequest_ForwardData& operator=(const ForwardRequest_ForwardData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForwardRequest_ForwardData(ForwardRequest_ForwardData&& from) noexcept
    : ForwardRequest_ForwardData() {
    *this = ::std::move(from);
  }

  inline ForwardRequest_ForwardData& operator=(ForwardRequest_ForwardData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardRequest_ForwardData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardRequest_ForwardData* internal_default_instance() {
    return reinterpret_cast<const ForwardRequest_ForwardData*>(
               &_ForwardRequest_ForwardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ForwardRequest_ForwardData* other);
  friend void swap(ForwardRequest_ForwardData& a, ForwardRequest_ForwardData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardRequest_ForwardData* New() const final {
    return CreateMaybeMessage<ForwardRequest_ForwardData>(NULL);
  }

  ForwardRequest_ForwardData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForwardRequest_ForwardData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForwardRequest_ForwardData& from);
  void MergeFrom(const ForwardRequest_ForwardData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardRequest_ForwardData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes det_input = 1;
  void clear_det_input();
  static const int kDetInputFieldNumber = 1;
  const ::std::string& det_input() const;
  void set_det_input(const ::std::string& value);
  #if LANG_CXX11
  void set_det_input(::std::string&& value);
  #endif
  void set_det_input(const char* value);
  void set_det_input(const void* value, size_t size);
  ::std::string* mutable_det_input();
  ::std::string* release_det_input();
  void set_allocated_det_input(::std::string* det_input);

  // bytes cls_input = 2;
  void clear_cls_input();
  static const int kClsInputFieldNumber = 2;
  const ::std::string& cls_input() const;
  void set_cls_input(const ::std::string& value);
  #if LANG_CXX11
  void set_cls_input(::std::string&& value);
  #endif
  void set_cls_input(const char* value);
  void set_cls_input(const void* value, size_t size);
  ::std::string* mutable_cls_input();
  ::std::string* release_cls_input();
  void set_allocated_cls_input(::std::string* cls_input);

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.ForwardRequest.ForwardData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr det_input_;
  ::google::protobuf::internal::ArenaStringPtr cls_input_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.ForwardRequest) */ {
 public:
  ForwardRequest();
  virtual ~ForwardRequest();

  ForwardRequest(const ForwardRequest& from);

  inline ForwardRequest& operator=(const ForwardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForwardRequest(ForwardRequest&& from) noexcept
    : ForwardRequest() {
    *this = ::std::move(from);
  }

  inline ForwardRequest& operator=(ForwardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardRequest* internal_default_instance() {
    return reinterpret_cast<const ForwardRequest*>(
               &_ForwardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ForwardRequest* other);
  friend void swap(ForwardRequest& a, ForwardRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardRequest* New() const final {
    return CreateMaybeMessage<ForwardRequest>(NULL);
  }

  ForwardRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForwardRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForwardRequest& from);
  void MergeFrom(const ForwardRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ForwardRequest_ForwardData ForwardData;

  // accessors -------------------------------------------------------

  // .tron.terror_mixup.ForwardRequest.ForwardData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  private:
  const ::tron::terror_mixup::ForwardRequest_ForwardData& _internal_data() const;
  public:
  const ::tron::terror_mixup::ForwardRequest_ForwardData& data() const;
  ::tron::terror_mixup::ForwardRequest_ForwardData* release_data();
  ::tron::terror_mixup::ForwardRequest_ForwardData* mutable_data();
  void set_allocated_data(::tron::terror_mixup::ForwardRequest_ForwardData* data);

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.ForwardRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tron::terror_mixup::ForwardRequest_ForwardData* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardRequests : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.ForwardRequests) */ {
 public:
  ForwardRequests();
  virtual ~ForwardRequests();

  ForwardRequests(const ForwardRequests& from);

  inline ForwardRequests& operator=(const ForwardRequests& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForwardRequests(ForwardRequests&& from) noexcept
    : ForwardRequests() {
    *this = ::std::move(from);
  }

  inline ForwardRequests& operator=(ForwardRequests&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardRequests& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardRequests* internal_default_instance() {
    return reinterpret_cast<const ForwardRequests*>(
               &_ForwardRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ForwardRequests* other);
  friend void swap(ForwardRequests& a, ForwardRequests& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardRequests* New() const final {
    return CreateMaybeMessage<ForwardRequests>(NULL);
  }

  ForwardRequests* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForwardRequests>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForwardRequests& from);
  void MergeFrom(const ForwardRequests& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardRequests* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tron.terror_mixup.ForwardRequest requests = 1;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 1;
  ::tron::terror_mixup::ForwardRequest* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardRequest >*
      mutable_requests();
  const ::tron::terror_mixup::ForwardRequest& requests(int index) const;
  ::tron::terror_mixup::ForwardRequest* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardRequest >&
      requests() const;

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.ForwardRequests)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardRequest > requests_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.ForwardResponse) */ {
 public:
  ForwardResponse();
  virtual ~ForwardResponse();

  ForwardResponse(const ForwardResponse& from);

  inline ForwardResponse& operator=(const ForwardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForwardResponse(ForwardResponse&& from) noexcept
    : ForwardResponse() {
    *this = ::std::move(from);
  }

  inline ForwardResponse& operator=(ForwardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardResponse* internal_default_instance() {
    return reinterpret_cast<const ForwardResponse*>(
               &_ForwardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ForwardResponse* other);
  friend void swap(ForwardResponse& a, ForwardResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardResponse* New() const final {
    return CreateMaybeMessage<ForwardResponse>(NULL);
  }

  ForwardResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForwardResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForwardResponse& from);
  void MergeFrom(const ForwardResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bytes output_det = 3;
  void clear_output_det();
  static const int kOutputDetFieldNumber = 3;
  const ::std::string& output_det() const;
  void set_output_det(const ::std::string& value);
  #if LANG_CXX11
  void set_output_det(::std::string&& value);
  #endif
  void set_output_det(const char* value);
  void set_output_det(const void* value, size_t size);
  ::std::string* mutable_output_det();
  ::std::string* release_output_det();
  void set_allocated_output_det(::std::string* output_det);

  // bytes output_fine = 4;
  void clear_output_fine();
  static const int kOutputFineFieldNumber = 4;
  const ::std::string& output_fine() const;
  void set_output_fine(const ::std::string& value);
  #if LANG_CXX11
  void set_output_fine(::std::string&& value);
  #endif
  void set_output_fine(const char* value);
  void set_output_fine(const void* value, size_t size);
  ::std::string* mutable_output_fine();
  ::std::string* release_output_fine();
  void set_allocated_output_fine(::std::string* output_fine);

  // bytes output_coarse = 5;
  void clear_output_coarse();
  static const int kOutputCoarseFieldNumber = 5;
  const ::std::string& output_coarse() const;
  void set_output_coarse(const ::std::string& value);
  #if LANG_CXX11
  void set_output_coarse(::std::string&& value);
  #endif
  void set_output_coarse(const char* value);
  void set_output_coarse(const void* value, size_t size);
  ::std::string* mutable_output_coarse();
  ::std::string* release_output_coarse();
  void set_allocated_output_coarse(::std::string* output_coarse);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // int32 batch_index = 6;
  void clear_batch_index();
  static const int kBatchIndexFieldNumber = 6;
  ::google::protobuf::int32 batch_index() const;
  void set_batch_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.ForwardResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr output_det_;
  ::google::protobuf::internal::ArenaStringPtr output_fine_;
  ::google::protobuf::internal::ArenaStringPtr output_coarse_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 batch_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardResponses : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tron.terror_mixup.ForwardResponses) */ {
 public:
  ForwardResponses();
  virtual ~ForwardResponses();

  ForwardResponses(const ForwardResponses& from);

  inline ForwardResponses& operator=(const ForwardResponses& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForwardResponses(ForwardResponses&& from) noexcept
    : ForwardResponses() {
    *this = ::std::move(from);
  }

  inline ForwardResponses& operator=(ForwardResponses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardResponses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardResponses* internal_default_instance() {
    return reinterpret_cast<const ForwardResponses*>(
               &_ForwardResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ForwardResponses* other);
  friend void swap(ForwardResponses& a, ForwardResponses& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardResponses* New() const final {
    return CreateMaybeMessage<ForwardResponses>(NULL);
  }

  ForwardResponses* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForwardResponses>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForwardResponses& from);
  void MergeFrom(const ForwardResponses& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardResponses* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tron.terror_mixup.ForwardResponse responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  ::tron::terror_mixup::ForwardResponse* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardResponse >*
      mutable_responses();
  const ::tron::terror_mixup::ForwardResponse& responses(int index) const;
  ::tron::terror_mixup::ForwardResponse* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:tron.terror_mixup.ForwardResponses)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardResponse > responses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Response_Confidences

// int32 index = 1;
inline void Response_Confidences::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Response_Confidences::index() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.Response.Confidences.index)
  return index_;
}
inline void Response_Confidences::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:tron.terror_mixup.Response.Confidences.index)
}

// float score = 2;
inline void Response_Confidences::clear_score() {
  score_ = 0;
}
inline float Response_Confidences::score() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.Response.Confidences.score)
  return score_;
}
inline void Response_Confidences::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:tron.terror_mixup.Response.Confidences.score)
}

// string class = 3;
inline void Response_Confidences::clear_class_() {
  class__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response_Confidences::class_() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.Response.Confidences.class)
  return class__.GetNoArena();
}
inline void Response_Confidences::set_class_(const ::std::string& value) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.Response.Confidences.class)
}
#if LANG_CXX11
inline void Response_Confidences::set_class_(::std::string&& value) {
  
  class__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.Response.Confidences.class)
}
#endif
inline void Response_Confidences::set_class_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.Response.Confidences.class)
}
inline void Response_Confidences::set_class_(const char* value, size_t size) {
  
  class__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.Response.Confidences.class)
}
inline ::std::string* Response_Confidences::mutable_class_() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.Response.Confidences.class)
  return class__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response_Confidences::release_class_() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.Response.Confidences.class)
  
  return class__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_Confidences::set_allocated_class_(::std::string* class_) {
  if (class_ != NULL) {
    
  } else {
    
  }
  class__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.Response.Confidences.class)
}

// -------------------------------------------------------------------

// Response

// string checkpoint = 1;
inline void Response::clear_checkpoint() {
  checkpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::checkpoint() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.Response.checkpoint)
  return checkpoint_.GetNoArena();
}
inline void Response::set_checkpoint(const ::std::string& value) {
  
  checkpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.Response.checkpoint)
}
#if LANG_CXX11
inline void Response::set_checkpoint(::std::string&& value) {
  
  checkpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.Response.checkpoint)
}
#endif
inline void Response::set_checkpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checkpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.Response.checkpoint)
}
inline void Response::set_checkpoint(const char* value, size_t size) {
  
  checkpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.Response.checkpoint)
}
inline ::std::string* Response::mutable_checkpoint() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.Response.checkpoint)
  return checkpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_checkpoint() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.Response.checkpoint)
  
  return checkpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_checkpoint(::std::string* checkpoint) {
  if (checkpoint != NULL) {
    
  } else {
    
  }
  checkpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.Response.checkpoint)
}

// repeated .tron.terror_mixup.Response.Confidences confidences = 2;
inline int Response::confidences_size() const {
  return confidences_.size();
}
inline void Response::clear_confidences() {
  confidences_.Clear();
}
inline ::tron::terror_mixup::Response_Confidences* Response::mutable_confidences(int index) {
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.Response.confidences)
  return confidences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::Response_Confidences >*
Response::mutable_confidences() {
  // @@protoc_insertion_point(field_mutable_list:tron.terror_mixup.Response.confidences)
  return &confidences_;
}
inline const ::tron::terror_mixup::Response_Confidences& Response::confidences(int index) const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.Response.confidences)
  return confidences_.Get(index);
}
inline ::tron::terror_mixup::Response_Confidences* Response::add_confidences() {
  // @@protoc_insertion_point(field_add:tron.terror_mixup.Response.confidences)
  return confidences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::Response_Confidences >&
Response::confidences() const {
  // @@protoc_insertion_point(field_list:tron.terror_mixup.Response.confidences)
  return confidences_;
}

// -------------------------------------------------------------------

// ForwardRequest_ForwardData

// bytes det_input = 1;
inline void ForwardRequest_ForwardData::clear_det_input() {
  det_input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardRequest_ForwardData::det_input() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
  return det_input_.GetNoArena();
}
inline void ForwardRequest_ForwardData::set_det_input(const ::std::string& value) {
  
  det_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
}
#if LANG_CXX11
inline void ForwardRequest_ForwardData::set_det_input(::std::string&& value) {
  
  det_input_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
}
#endif
inline void ForwardRequest_ForwardData::set_det_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  det_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
}
inline void ForwardRequest_ForwardData::set_det_input(const void* value, size_t size) {
  
  det_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
}
inline ::std::string* ForwardRequest_ForwardData::mutable_det_input() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
  return det_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardRequest_ForwardData::release_det_input() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
  
  return det_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardRequest_ForwardData::set_allocated_det_input(::std::string* det_input) {
  if (det_input != NULL) {
    
  } else {
    
  }
  det_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), det_input);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardRequest.ForwardData.det_input)
}

// bytes cls_input = 2;
inline void ForwardRequest_ForwardData::clear_cls_input() {
  cls_input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardRequest_ForwardData::cls_input() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
  return cls_input_.GetNoArena();
}
inline void ForwardRequest_ForwardData::set_cls_input(const ::std::string& value) {
  
  cls_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
}
#if LANG_CXX11
inline void ForwardRequest_ForwardData::set_cls_input(::std::string&& value) {
  
  cls_input_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
}
#endif
inline void ForwardRequest_ForwardData::set_cls_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cls_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
}
inline void ForwardRequest_ForwardData::set_cls_input(const void* value, size_t size) {
  
  cls_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
}
inline ::std::string* ForwardRequest_ForwardData::mutable_cls_input() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
  return cls_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardRequest_ForwardData::release_cls_input() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
  
  return cls_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardRequest_ForwardData::set_allocated_cls_input(::std::string* cls_input) {
  if (cls_input != NULL) {
    
  } else {
    
  }
  cls_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cls_input);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardRequest.ForwardData.cls_input)
}

// -------------------------------------------------------------------

// ForwardRequest

// .tron.terror_mixup.ForwardRequest.ForwardData data = 1;
inline bool ForwardRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void ForwardRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::tron::terror_mixup::ForwardRequest_ForwardData& ForwardRequest::_internal_data() const {
  return *data_;
}
inline const ::tron::terror_mixup::ForwardRequest_ForwardData& ForwardRequest::data() const {
  const ::tron::terror_mixup::ForwardRequest_ForwardData* p = data_;
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardRequest.data)
  return p != NULL ? *p : *reinterpret_cast<const ::tron::terror_mixup::ForwardRequest_ForwardData*>(
      &::tron::terror_mixup::_ForwardRequest_ForwardData_default_instance_);
}
inline ::tron::terror_mixup::ForwardRequest_ForwardData* ForwardRequest::release_data() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardRequest.data)
  
  ::tron::terror_mixup::ForwardRequest_ForwardData* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::tron::terror_mixup::ForwardRequest_ForwardData* ForwardRequest::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::tron::terror_mixup::ForwardRequest_ForwardData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardRequest.data)
  return data_;
}
inline void ForwardRequest::set_allocated_data(::tron::terror_mixup::ForwardRequest_ForwardData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardRequest.data)
}

// -------------------------------------------------------------------

// ForwardRequests

// repeated .tron.terror_mixup.ForwardRequest requests = 1;
inline int ForwardRequests::requests_size() const {
  return requests_.size();
}
inline void ForwardRequests::clear_requests() {
  requests_.Clear();
}
inline ::tron::terror_mixup::ForwardRequest* ForwardRequests::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardRequests.requests)
  return requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardRequest >*
ForwardRequests::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:tron.terror_mixup.ForwardRequests.requests)
  return &requests_;
}
inline const ::tron::terror_mixup::ForwardRequest& ForwardRequests::requests(int index) const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardRequests.requests)
  return requests_.Get(index);
}
inline ::tron::terror_mixup::ForwardRequest* ForwardRequests::add_requests() {
  // @@protoc_insertion_point(field_add:tron.terror_mixup.ForwardRequests.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardRequest >&
ForwardRequests::requests() const {
  // @@protoc_insertion_point(field_list:tron.terror_mixup.ForwardRequests.requests)
  return requests_;
}

// -------------------------------------------------------------------

// ForwardResponse

// int32 code = 1;
inline void ForwardResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ForwardResponse::code() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponse.code)
  return code_;
}
inline void ForwardResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardResponse.code)
}

// string message = 2;
inline void ForwardResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardResponse::message() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponse.message)
  return message_.GetNoArena();
}
inline void ForwardResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardResponse.message)
}
#if LANG_CXX11
inline void ForwardResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.ForwardResponse.message)
}
#endif
inline void ForwardResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.ForwardResponse.message)
}
inline void ForwardResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.ForwardResponse.message)
}
inline ::std::string* ForwardResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardResponse::release_message() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardResponse.message)
}

// bytes output_det = 3;
inline void ForwardResponse::clear_output_det() {
  output_det_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardResponse::output_det() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponse.output_det)
  return output_det_.GetNoArena();
}
inline void ForwardResponse::set_output_det(const ::std::string& value) {
  
  output_det_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardResponse.output_det)
}
#if LANG_CXX11
inline void ForwardResponse::set_output_det(::std::string&& value) {
  
  output_det_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.ForwardResponse.output_det)
}
#endif
inline void ForwardResponse::set_output_det(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_det_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.ForwardResponse.output_det)
}
inline void ForwardResponse::set_output_det(const void* value, size_t size) {
  
  output_det_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.ForwardResponse.output_det)
}
inline ::std::string* ForwardResponse::mutable_output_det() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardResponse.output_det)
  return output_det_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardResponse::release_output_det() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardResponse.output_det)
  
  return output_det_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardResponse::set_allocated_output_det(::std::string* output_det) {
  if (output_det != NULL) {
    
  } else {
    
  }
  output_det_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_det);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardResponse.output_det)
}

// bytes output_fine = 4;
inline void ForwardResponse::clear_output_fine() {
  output_fine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardResponse::output_fine() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponse.output_fine)
  return output_fine_.GetNoArena();
}
inline void ForwardResponse::set_output_fine(const ::std::string& value) {
  
  output_fine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardResponse.output_fine)
}
#if LANG_CXX11
inline void ForwardResponse::set_output_fine(::std::string&& value) {
  
  output_fine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.ForwardResponse.output_fine)
}
#endif
inline void ForwardResponse::set_output_fine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_fine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.ForwardResponse.output_fine)
}
inline void ForwardResponse::set_output_fine(const void* value, size_t size) {
  
  output_fine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.ForwardResponse.output_fine)
}
inline ::std::string* ForwardResponse::mutable_output_fine() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardResponse.output_fine)
  return output_fine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardResponse::release_output_fine() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardResponse.output_fine)
  
  return output_fine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardResponse::set_allocated_output_fine(::std::string* output_fine) {
  if (output_fine != NULL) {
    
  } else {
    
  }
  output_fine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_fine);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardResponse.output_fine)
}

// bytes output_coarse = 5;
inline void ForwardResponse::clear_output_coarse() {
  output_coarse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardResponse::output_coarse() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponse.output_coarse)
  return output_coarse_.GetNoArena();
}
inline void ForwardResponse::set_output_coarse(const ::std::string& value) {
  
  output_coarse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardResponse.output_coarse)
}
#if LANG_CXX11
inline void ForwardResponse::set_output_coarse(::std::string&& value) {
  
  output_coarse_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tron.terror_mixup.ForwardResponse.output_coarse)
}
#endif
inline void ForwardResponse::set_output_coarse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_coarse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tron.terror_mixup.ForwardResponse.output_coarse)
}
inline void ForwardResponse::set_output_coarse(const void* value, size_t size) {
  
  output_coarse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tron.terror_mixup.ForwardResponse.output_coarse)
}
inline ::std::string* ForwardResponse::mutable_output_coarse() {
  
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardResponse.output_coarse)
  return output_coarse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardResponse::release_output_coarse() {
  // @@protoc_insertion_point(field_release:tron.terror_mixup.ForwardResponse.output_coarse)
  
  return output_coarse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardResponse::set_allocated_output_coarse(::std::string* output_coarse) {
  if (output_coarse != NULL) {
    
  } else {
    
  }
  output_coarse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_coarse);
  // @@protoc_insertion_point(field_set_allocated:tron.terror_mixup.ForwardResponse.output_coarse)
}

// int32 batch_index = 6;
inline void ForwardResponse::clear_batch_index() {
  batch_index_ = 0;
}
inline ::google::protobuf::int32 ForwardResponse::batch_index() const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponse.batch_index)
  return batch_index_;
}
inline void ForwardResponse::set_batch_index(::google::protobuf::int32 value) {
  
  batch_index_ = value;
  // @@protoc_insertion_point(field_set:tron.terror_mixup.ForwardResponse.batch_index)
}

// -------------------------------------------------------------------

// ForwardResponses

// repeated .tron.terror_mixup.ForwardResponse responses = 1;
inline int ForwardResponses::responses_size() const {
  return responses_.size();
}
inline void ForwardResponses::clear_responses() {
  responses_.Clear();
}
inline ::tron::terror_mixup::ForwardResponse* ForwardResponses::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:tron.terror_mixup.ForwardResponses.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardResponse >*
ForwardResponses::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:tron.terror_mixup.ForwardResponses.responses)
  return &responses_;
}
inline const ::tron::terror_mixup::ForwardResponse& ForwardResponses::responses(int index) const {
  // @@protoc_insertion_point(field_get:tron.terror_mixup.ForwardResponses.responses)
  return responses_.Get(index);
}
inline ::tron::terror_mixup::ForwardResponse* ForwardResponses::add_responses() {
  // @@protoc_insertion_point(field_add:tron.terror_mixup.ForwardResponses.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tron::terror_mixup::ForwardResponse >&
ForwardResponses::responses() const {
  // @@protoc_insertion_point(field_list:tron.terror_mixup.ForwardResponses.responses)
  return responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace terror_mixup
}  // namespace tron

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_forward_2eproto
