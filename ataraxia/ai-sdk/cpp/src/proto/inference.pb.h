// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inference.proto

#ifndef PROTOBUF_INCLUDED_inference_2eproto
#define PROTOBUF_INCLUDED_inference_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_inference_2eproto 

namespace protobuf_inference_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_inference_2eproto
namespace inference {
class CreateParams;
class CreateParamsDefaultTypeInternal;
extern CreateParamsDefaultTypeInternal _CreateParams_default_instance_;
class CreateParams_Env;
class CreateParams_EnvDefaultTypeInternal;
extern CreateParams_EnvDefaultTypeInternal _CreateParams_Env_default_instance_;
class CreateParams_File;
class CreateParams_FileDefaultTypeInternal;
extern CreateParams_FileDefaultTypeInternal _CreateParams_File_default_instance_;
class InferenceRequest;
class InferenceRequestDefaultTypeInternal;
extern InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
class InferenceRequest_RequestData;
class InferenceRequest_RequestDataDefaultTypeInternal;
extern InferenceRequest_RequestDataDefaultTypeInternal _InferenceRequest_RequestData_default_instance_;
class InferenceRequests;
class InferenceRequestsDefaultTypeInternal;
extern InferenceRequestsDefaultTypeInternal _InferenceRequests_default_instance_;
class InferenceResponse;
class InferenceResponseDefaultTypeInternal;
extern InferenceResponseDefaultTypeInternal _InferenceResponse_default_instance_;
class InferenceResponses;
class InferenceResponsesDefaultTypeInternal;
extern InferenceResponsesDefaultTypeInternal _InferenceResponses_default_instance_;
class InitParams;
class InitParamsDefaultTypeInternal;
extern InitParamsDefaultTypeInternal _InitParams_default_instance_;
}  // namespace inference
namespace google {
namespace protobuf {
template<> ::inference::CreateParams* Arena::CreateMaybeMessage<::inference::CreateParams>(Arena*);
template<> ::inference::CreateParams_Env* Arena::CreateMaybeMessage<::inference::CreateParams_Env>(Arena*);
template<> ::inference::CreateParams_File* Arena::CreateMaybeMessage<::inference::CreateParams_File>(Arena*);
template<> ::inference::InferenceRequest* Arena::CreateMaybeMessage<::inference::InferenceRequest>(Arena*);
template<> ::inference::InferenceRequest_RequestData* Arena::CreateMaybeMessage<::inference::InferenceRequest_RequestData>(Arena*);
template<> ::inference::InferenceRequests* Arena::CreateMaybeMessage<::inference::InferenceRequests>(Arena*);
template<> ::inference::InferenceResponse* Arena::CreateMaybeMessage<::inference::InferenceResponse>(Arena*);
template<> ::inference::InferenceResponses* Arena::CreateMaybeMessage<::inference::InferenceResponses>(Arena*);
template<> ::inference::InitParams* Arena::CreateMaybeMessage<::inference::InitParams>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace inference {

// ===================================================================

class InitParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.InitParams) */ {
 public:
  InitParams();
  virtual ~InitParams();

  InitParams(const InitParams& from);

  inline InitParams& operator=(const InitParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitParams(InitParams&& from) noexcept
    : InitParams() {
    *this = ::std::move(from);
  }

  inline InitParams& operator=(InitParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitParams* internal_default_instance() {
    return reinterpret_cast<const InitParams*>(
               &_InitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InitParams* other);
  friend void swap(InitParams& a, InitParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitParams* New() const final {
    return CreateMaybeMessage<InitParams>(NULL);
  }

  InitParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitParams& from);
  void MergeFrom(const InitParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app = 1;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 1;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // @@protoc_insertion_point(class_scope:inference.InitParams)
 private:
  void set_has_app();
  void clear_has_app();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateParams_Env : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.CreateParams.Env) */ {
 public:
  CreateParams_Env();
  virtual ~CreateParams_Env();

  CreateParams_Env(const CreateParams_Env& from);

  inline CreateParams_Env& operator=(const CreateParams_Env& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateParams_Env(CreateParams_Env&& from) noexcept
    : CreateParams_Env() {
    *this = ::std::move(from);
  }

  inline CreateParams_Env& operator=(CreateParams_Env&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateParams_Env& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateParams_Env* internal_default_instance() {
    return reinterpret_cast<const CreateParams_Env*>(
               &_CreateParams_Env_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateParams_Env* other);
  friend void swap(CreateParams_Env& a, CreateParams_Env& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateParams_Env* New() const final {
    return CreateMaybeMessage<CreateParams_Env>(NULL);
  }

  CreateParams_Env* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateParams_Env>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateParams_Env& from);
  void MergeFrom(const CreateParams_Env& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateParams_Env* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app = 1;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 1;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // optional string workspace = 2;
  bool has_workspace() const;
  void clear_workspace();
  static const int kWorkspaceFieldNumber = 2;
  const ::std::string& workspace() const;
  void set_workspace(const ::std::string& value);
  #if LANG_CXX11
  void set_workspace(::std::string&& value);
  #endif
  void set_workspace(const char* value);
  void set_workspace(const char* value, size_t size);
  ::std::string* mutable_workspace();
  ::std::string* release_workspace();
  void set_allocated_workspace(::std::string* workspace);

  // @@protoc_insertion_point(class_scope:inference.CreateParams.Env)
 private:
  void set_has_app();
  void clear_has_app();
  void set_has_workspace();
  void clear_has_workspace();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::google::protobuf::internal::ArenaStringPtr workspace_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateParams_File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.CreateParams.File) */ {
 public:
  CreateParams_File();
  virtual ~CreateParams_File();

  CreateParams_File(const CreateParams_File& from);

  inline CreateParams_File& operator=(const CreateParams_File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateParams_File(CreateParams_File&& from) noexcept
    : CreateParams_File() {
    *this = ::std::move(from);
  }

  inline CreateParams_File& operator=(CreateParams_File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateParams_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateParams_File* internal_default_instance() {
    return reinterpret_cast<const CreateParams_File*>(
               &_CreateParams_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateParams_File* other);
  friend void swap(CreateParams_File& a, CreateParams_File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateParams_File* New() const final {
    return CreateMaybeMessage<CreateParams_File>(NULL);
  }

  CreateParams_File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateParams_File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateParams_File& from);
  void MergeFrom(const CreateParams_File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateParams_File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:inference.CreateParams.File)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_body();
  void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.CreateParams) */ {
 public:
  CreateParams();
  virtual ~CreateParams();

  CreateParams(const CreateParams& from);

  inline CreateParams& operator=(const CreateParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateParams(CreateParams&& from) noexcept
    : CreateParams() {
    *this = ::std::move(from);
  }

  inline CreateParams& operator=(CreateParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateParams* internal_default_instance() {
    return reinterpret_cast<const CreateParams*>(
               &_CreateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateParams* other);
  friend void swap(CreateParams& a, CreateParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateParams* New() const final {
    return CreateMaybeMessage<CreateParams>(NULL);
  }

  CreateParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateParams& from);
  void MergeFrom(const CreateParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateParams_Env Env;
  typedef CreateParams_File File;

  // accessors -------------------------------------------------------

  // repeated .inference.CreateParams.File model_files = 9;
  int model_files_size() const;
  void clear_model_files();
  static const int kModelFilesFieldNumber = 9;
  ::inference::CreateParams_File* mutable_model_files(int index);
  ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >*
      mutable_model_files();
  const ::inference::CreateParams_File& model_files(int index) const;
  ::inference::CreateParams_File* add_model_files();
  const ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >&
      model_files() const;

  // repeated .inference.CreateParams.File custom_files = 11;
  int custom_files_size() const;
  void clear_custom_files();
  static const int kCustomFilesFieldNumber = 11;
  ::inference::CreateParams_File* mutable_custom_files(int index);
  ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >*
      mutable_custom_files();
  const ::inference::CreateParams_File& custom_files(int index) const;
  ::inference::CreateParams_File* add_custom_files();
  const ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >&
      custom_files() const;

  // optional string use_device = 1 [default = "GPU"];
  bool has_use_device() const;
  void clear_use_device();
  static const int kUseDeviceFieldNumber = 1;
  const ::std::string& use_device() const;
  void set_use_device(const ::std::string& value);
  #if LANG_CXX11
  void set_use_device(::std::string&& value);
  #endif
  void set_use_device(const char* value);
  void set_use_device(const char* value, size_t size);
  ::std::string* mutable_use_device();
  ::std::string* release_use_device();
  void set_allocated_use_device(::std::string* use_device);

  // optional string model_params = 10;
  bool has_model_params() const;
  void clear_model_params();
  static const int kModelParamsFieldNumber = 10;
  const ::std::string& model_params() const;
  void set_model_params(const ::std::string& value);
  #if LANG_CXX11
  void set_model_params(::std::string&& value);
  #endif
  void set_model_params(const char* value);
  void set_model_params(const char* value, size_t size);
  ::std::string* mutable_model_params();
  ::std::string* release_model_params();
  void set_allocated_model_params(::std::string* model_params);

  // optional string custom_params = 12;
  bool has_custom_params() const;
  void clear_custom_params();
  static const int kCustomParamsFieldNumber = 12;
  const ::std::string& custom_params() const;
  void set_custom_params(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_params(::std::string&& value);
  #endif
  void set_custom_params(const char* value);
  void set_custom_params(const char* value, size_t size);
  ::std::string* mutable_custom_params();
  ::std::string* release_custom_params();
  void set_allocated_custom_params(::std::string* custom_params);

  // optional .inference.CreateParams.Env env = 4;
  bool has_env() const;
  void clear_env();
  static const int kEnvFieldNumber = 4;
  private:
  const ::inference::CreateParams_Env& _internal_env() const;
  public:
  const ::inference::CreateParams_Env& env() const;
  ::inference::CreateParams_Env* release_env();
  ::inference::CreateParams_Env* mutable_env();
  void set_allocated_env(::inference::CreateParams_Env* env);

  // optional int32 batch_size = 2 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inference.CreateParams)
 private:
  void set_has_use_device();
  void clear_has_use_device();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_env();
  void clear_has_env();
  void set_has_model_params();
  void clear_has_model_params();
  void set_has_custom_params();
  void clear_has_custom_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File > model_files_;
  ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File > custom_files_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_use_device_;
  private:
  ::google::protobuf::internal::ArenaStringPtr use_device_;
  ::google::protobuf::internal::ArenaStringPtr model_params_;
  ::google::protobuf::internal::ArenaStringPtr custom_params_;
  ::inference::CreateParams_Env* env_;
  ::google::protobuf::int32 batch_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InferenceRequest_RequestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.InferenceRequest.RequestData) */ {
 public:
  InferenceRequest_RequestData();
  virtual ~InferenceRequest_RequestData();

  InferenceRequest_RequestData(const InferenceRequest_RequestData& from);

  inline InferenceRequest_RequestData& operator=(const InferenceRequest_RequestData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InferenceRequest_RequestData(InferenceRequest_RequestData&& from) noexcept
    : InferenceRequest_RequestData() {
    *this = ::std::move(from);
  }

  inline InferenceRequest_RequestData& operator=(InferenceRequest_RequestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InferenceRequest_RequestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceRequest_RequestData* internal_default_instance() {
    return reinterpret_cast<const InferenceRequest_RequestData*>(
               &_InferenceRequest_RequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InferenceRequest_RequestData* other);
  friend void swap(InferenceRequest_RequestData& a, InferenceRequest_RequestData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InferenceRequest_RequestData* New() const final {
    return CreateMaybeMessage<InferenceRequest_RequestData>(NULL);
  }

  InferenceRequest_RequestData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InferenceRequest_RequestData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InferenceRequest_RequestData& from);
  void MergeFrom(const InferenceRequest_RequestData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceRequest_RequestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string attribute = 2;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 2;
  const ::std::string& attribute() const;
  void set_attribute(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute(::std::string&& value);
  #endif
  void set_attribute(const char* value);
  void set_attribute(const char* value, size_t size);
  ::std::string* mutable_attribute();
  ::std::string* release_attribute();
  void set_allocated_attribute(::std::string* attribute);

  // optional bytes body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:inference.InferenceRequest.RequestData)
 private:
  void set_has_uri();
  void clear_has_uri();
  void set_has_attribute();
  void clear_has_attribute();
  void set_has_body();
  void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr attribute_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InferenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.InferenceRequest) */ {
 public:
  InferenceRequest();
  virtual ~InferenceRequest();

  InferenceRequest(const InferenceRequest& from);

  inline InferenceRequest& operator=(const InferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InferenceRequest(InferenceRequest&& from) noexcept
    : InferenceRequest() {
    *this = ::std::move(from);
  }

  inline InferenceRequest& operator=(InferenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InferenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceRequest* internal_default_instance() {
    return reinterpret_cast<const InferenceRequest*>(
               &_InferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InferenceRequest* other);
  friend void swap(InferenceRequest& a, InferenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InferenceRequest* New() const final {
    return CreateMaybeMessage<InferenceRequest>(NULL);
  }

  InferenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InferenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InferenceRequest& from);
  void MergeFrom(const InferenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InferenceRequest_RequestData RequestData;

  // accessors -------------------------------------------------------

  // repeated .inference.InferenceRequest.RequestData datas = 2;
  int datas_size() const;
  void clear_datas();
  static const int kDatasFieldNumber = 2;
  ::inference::InferenceRequest_RequestData* mutable_datas(int index);
  ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest_RequestData >*
      mutable_datas();
  const ::inference::InferenceRequest_RequestData& datas(int index) const;
  ::inference::InferenceRequest_RequestData* add_datas();
  const ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest_RequestData >&
      datas() const;

  // optional string params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // optional .inference.InferenceRequest.RequestData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  private:
  const ::inference::InferenceRequest_RequestData& _internal_data() const;
  public:
  const ::inference::InferenceRequest_RequestData& data() const;
  ::inference::InferenceRequest_RequestData* release_data();
  ::inference::InferenceRequest_RequestData* mutable_data();
  void set_allocated_data(::inference::InferenceRequest_RequestData* data);

  // @@protoc_insertion_point(class_scope:inference.InferenceRequest)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_params();
  void clear_has_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest_RequestData > datas_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  ::inference::InferenceRequest_RequestData* data_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InferenceRequests : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.InferenceRequests) */ {
 public:
  InferenceRequests();
  virtual ~InferenceRequests();

  InferenceRequests(const InferenceRequests& from);

  inline InferenceRequests& operator=(const InferenceRequests& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InferenceRequests(InferenceRequests&& from) noexcept
    : InferenceRequests() {
    *this = ::std::move(from);
  }

  inline InferenceRequests& operator=(InferenceRequests&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InferenceRequests& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceRequests* internal_default_instance() {
    return reinterpret_cast<const InferenceRequests*>(
               &_InferenceRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(InferenceRequests* other);
  friend void swap(InferenceRequests& a, InferenceRequests& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InferenceRequests* New() const final {
    return CreateMaybeMessage<InferenceRequests>(NULL);
  }

  InferenceRequests* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InferenceRequests>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InferenceRequests& from);
  void MergeFrom(const InferenceRequests& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceRequests* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inference.InferenceRequest requests = 1;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 1;
  ::inference::InferenceRequest* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest >*
      mutable_requests();
  const ::inference::InferenceRequest& requests(int index) const;
  ::inference::InferenceRequest* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest >&
      requests() const;

  // @@protoc_insertion_point(class_scope:inference.InferenceRequests)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest > requests_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InferenceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.InferenceResponse) */ {
 public:
  InferenceResponse();
  virtual ~InferenceResponse();

  InferenceResponse(const InferenceResponse& from);

  inline InferenceResponse& operator=(const InferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InferenceResponse(InferenceResponse&& from) noexcept
    : InferenceResponse() {
    *this = ::std::move(from);
  }

  inline InferenceResponse& operator=(InferenceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InferenceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceResponse* internal_default_instance() {
    return reinterpret_cast<const InferenceResponse*>(
               &_InferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(InferenceResponse* other);
  friend void swap(InferenceResponse& a, InferenceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InferenceResponse* New() const final {
    return CreateMaybeMessage<InferenceResponse>(NULL);
  }

  InferenceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InferenceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InferenceResponse& from);
  void MergeFrom(const InferenceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string result = 5;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 5;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // optional bytes body = 6;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 6;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inference.InferenceResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_message();
  void clear_has_message();
  void set_has_result();
  void clear_has_result();
  void set_has_body();
  void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InferenceResponses : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.InferenceResponses) */ {
 public:
  InferenceResponses();
  virtual ~InferenceResponses();

  InferenceResponses(const InferenceResponses& from);

  inline InferenceResponses& operator=(const InferenceResponses& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InferenceResponses(InferenceResponses&& from) noexcept
    : InferenceResponses() {
    *this = ::std::move(from);
  }

  inline InferenceResponses& operator=(InferenceResponses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InferenceResponses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferenceResponses* internal_default_instance() {
    return reinterpret_cast<const InferenceResponses*>(
               &_InferenceResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(InferenceResponses* other);
  friend void swap(InferenceResponses& a, InferenceResponses& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InferenceResponses* New() const final {
    return CreateMaybeMessage<InferenceResponses>(NULL);
  }

  InferenceResponses* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InferenceResponses>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InferenceResponses& from);
  void MergeFrom(const InferenceResponses& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceResponses* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inference.InferenceResponse responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  ::inference::InferenceResponse* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::inference::InferenceResponse >*
      mutable_responses();
  const ::inference::InferenceResponse& responses(int index) const;
  ::inference::InferenceResponse* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::inference::InferenceResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:inference.InferenceResponses)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::inference::InferenceResponse > responses_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitParams

// optional string app = 1;
inline bool InitParams::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitParams::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitParams::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitParams::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
inline const ::std::string& InitParams::app() const {
  // @@protoc_insertion_point(field_get:inference.InitParams.app)
  return app_.GetNoArena();
}
inline void InitParams::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InitParams.app)
}
#if LANG_CXX11
inline void InitParams::set_app(::std::string&& value) {
  set_has_app();
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InitParams.app)
}
#endif
inline void InitParams::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InitParams.app)
}
inline void InitParams::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InitParams.app)
}
inline ::std::string* InitParams::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:inference.InitParams.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitParams::release_app() {
  // @@protoc_insertion_point(field_release:inference.InitParams.app)
  if (!has_app()) {
    return NULL;
  }
  clear_has_app();
  return app_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitParams::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:inference.InitParams.app)
}

// -------------------------------------------------------------------

// CreateParams_Env

// optional string app = 1;
inline bool CreateParams_Env::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateParams_Env::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateParams_Env::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateParams_Env::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
inline const ::std::string& CreateParams_Env::app() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.Env.app)
  return app_.GetNoArena();
}
inline void CreateParams_Env::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.Env.app)
}
#if LANG_CXX11
inline void CreateParams_Env::set_app(::std::string&& value) {
  set_has_app();
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.Env.app)
}
#endif
inline void CreateParams_Env::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.Env.app)
}
inline void CreateParams_Env::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.Env.app)
}
inline ::std::string* CreateParams_Env::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.Env.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateParams_Env::release_app() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.Env.app)
  if (!has_app()) {
    return NULL;
  }
  clear_has_app();
  return app_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateParams_Env::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.Env.app)
}

// optional string workspace = 2;
inline bool CreateParams_Env::has_workspace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateParams_Env::set_has_workspace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateParams_Env::clear_has_workspace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateParams_Env::clear_workspace() {
  workspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workspace();
}
inline const ::std::string& CreateParams_Env::workspace() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.Env.workspace)
  return workspace_.GetNoArena();
}
inline void CreateParams_Env::set_workspace(const ::std::string& value) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.Env.workspace)
}
#if LANG_CXX11
inline void CreateParams_Env::set_workspace(::std::string&& value) {
  set_has_workspace();
  workspace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.Env.workspace)
}
#endif
inline void CreateParams_Env::set_workspace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.Env.workspace)
}
inline void CreateParams_Env::set_workspace(const char* value, size_t size) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.Env.workspace)
}
inline ::std::string* CreateParams_Env::mutable_workspace() {
  set_has_workspace();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.Env.workspace)
  return workspace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateParams_Env::release_workspace() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.Env.workspace)
  if (!has_workspace()) {
    return NULL;
  }
  clear_has_workspace();
  return workspace_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateParams_Env::set_allocated_workspace(::std::string* workspace) {
  if (workspace != NULL) {
    set_has_workspace();
  } else {
    clear_has_workspace();
  }
  workspace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workspace);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.Env.workspace)
}

// -------------------------------------------------------------------

// CreateParams_File

// optional string name = 1;
inline bool CreateParams_File::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateParams_File::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateParams_File::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateParams_File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CreateParams_File::name() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.File.name)
  return name_.GetNoArena();
}
inline void CreateParams_File::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.File.name)
}
#if LANG_CXX11
inline void CreateParams_File::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.File.name)
}
#endif
inline void CreateParams_File::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.File.name)
}
inline void CreateParams_File::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.File.name)
}
inline ::std::string* CreateParams_File::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateParams_File::release_name() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.File.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateParams_File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.File.name)
}

// optional bytes body = 2;
inline bool CreateParams_File::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateParams_File::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateParams_File::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateParams_File::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& CreateParams_File::body() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.File.body)
  return body_.GetNoArena();
}
inline void CreateParams_File::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.File.body)
}
#if LANG_CXX11
inline void CreateParams_File::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.File.body)
}
#endif
inline void CreateParams_File::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.File.body)
}
inline void CreateParams_File::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.File.body)
}
inline ::std::string* CreateParams_File::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.File.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateParams_File::release_body() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.File.body)
  if (!has_body()) {
    return NULL;
  }
  clear_has_body();
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateParams_File::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.File.body)
}

// -------------------------------------------------------------------

// CreateParams

// optional string use_device = 1 [default = "GPU"];
inline bool CreateParams::has_use_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateParams::set_has_use_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateParams::clear_has_use_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateParams::clear_use_device() {
  use_device_.ClearToDefaultNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get());
  clear_has_use_device();
}
inline const ::std::string& CreateParams::use_device() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.use_device)
  return use_device_.GetNoArena();
}
inline void CreateParams::set_use_device(const ::std::string& value) {
  set_has_use_device();
  use_device_.SetNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.use_device)
}
#if LANG_CXX11
inline void CreateParams::set_use_device(::std::string&& value) {
  set_has_use_device();
  use_device_.SetNoArena(
    &::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.use_device)
}
#endif
inline void CreateParams::set_use_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_use_device();
  use_device_.SetNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.use_device)
}
inline void CreateParams::set_use_device(const char* value, size_t size) {
  set_has_use_device();
  use_device_.SetNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.use_device)
}
inline ::std::string* CreateParams::mutable_use_device() {
  set_has_use_device();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.use_device)
  return use_device_.MutableNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get());
}
inline ::std::string* CreateParams::release_use_device() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.use_device)
  if (!has_use_device()) {
    return NULL;
  }
  clear_has_use_device();
  return use_device_.ReleaseNonDefaultNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get());
}
inline void CreateParams::set_allocated_use_device(::std::string* use_device) {
  if (use_device != NULL) {
    set_has_use_device();
  } else {
    clear_has_use_device();
  }
  use_device_.SetAllocatedNoArena(&::inference::CreateParams::_i_give_permission_to_break_this_code_default_use_device_.get(), use_device);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.use_device)
}

// optional int32 batch_size = 2 [default = 1];
inline bool CreateParams::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateParams::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateParams::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateParams::clear_batch_size() {
  batch_size_ = 1;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 CreateParams::batch_size() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.batch_size)
  return batch_size_;
}
inline void CreateParams::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:inference.CreateParams.batch_size)
}

// optional .inference.CreateParams.Env env = 4;
inline bool CreateParams::has_env() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateParams::set_has_env() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateParams::clear_has_env() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateParams::clear_env() {
  if (env_ != NULL) env_->Clear();
  clear_has_env();
}
inline const ::inference::CreateParams_Env& CreateParams::_internal_env() const {
  return *env_;
}
inline const ::inference::CreateParams_Env& CreateParams::env() const {
  const ::inference::CreateParams_Env* p = env_;
  // @@protoc_insertion_point(field_get:inference.CreateParams.env)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::CreateParams_Env*>(
      &::inference::_CreateParams_Env_default_instance_);
}
inline ::inference::CreateParams_Env* CreateParams::release_env() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.env)
  clear_has_env();
  ::inference::CreateParams_Env* temp = env_;
  env_ = NULL;
  return temp;
}
inline ::inference::CreateParams_Env* CreateParams::mutable_env() {
  set_has_env();
  if (env_ == NULL) {
    auto* p = CreateMaybeMessage<::inference::CreateParams_Env>(GetArenaNoVirtual());
    env_ = p;
  }
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.env)
  return env_;
}
inline void CreateParams::set_allocated_env(::inference::CreateParams_Env* env) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete env_;
  }
  if (env) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      env = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, env, submessage_arena);
    }
    set_has_env();
  } else {
    clear_has_env();
  }
  env_ = env;
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.env)
}

// repeated .inference.CreateParams.File model_files = 9;
inline int CreateParams::model_files_size() const {
  return model_files_.size();
}
inline void CreateParams::clear_model_files() {
  model_files_.Clear();
}
inline ::inference::CreateParams_File* CreateParams::mutable_model_files(int index) {
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.model_files)
  return model_files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >*
CreateParams::mutable_model_files() {
  // @@protoc_insertion_point(field_mutable_list:inference.CreateParams.model_files)
  return &model_files_;
}
inline const ::inference::CreateParams_File& CreateParams::model_files(int index) const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.model_files)
  return model_files_.Get(index);
}
inline ::inference::CreateParams_File* CreateParams::add_model_files() {
  // @@protoc_insertion_point(field_add:inference.CreateParams.model_files)
  return model_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >&
CreateParams::model_files() const {
  // @@protoc_insertion_point(field_list:inference.CreateParams.model_files)
  return model_files_;
}

// optional string model_params = 10;
inline bool CreateParams::has_model_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateParams::set_has_model_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateParams::clear_has_model_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateParams::clear_model_params() {
  model_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_params();
}
inline const ::std::string& CreateParams::model_params() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.model_params)
  return model_params_.GetNoArena();
}
inline void CreateParams::set_model_params(const ::std::string& value) {
  set_has_model_params();
  model_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.model_params)
}
#if LANG_CXX11
inline void CreateParams::set_model_params(::std::string&& value) {
  set_has_model_params();
  model_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.model_params)
}
#endif
inline void CreateParams::set_model_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model_params();
  model_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.model_params)
}
inline void CreateParams::set_model_params(const char* value, size_t size) {
  set_has_model_params();
  model_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.model_params)
}
inline ::std::string* CreateParams::mutable_model_params() {
  set_has_model_params();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.model_params)
  return model_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateParams::release_model_params() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.model_params)
  if (!has_model_params()) {
    return NULL;
  }
  clear_has_model_params();
  return model_params_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateParams::set_allocated_model_params(::std::string* model_params) {
  if (model_params != NULL) {
    set_has_model_params();
  } else {
    clear_has_model_params();
  }
  model_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_params);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.model_params)
}

// repeated .inference.CreateParams.File custom_files = 11;
inline int CreateParams::custom_files_size() const {
  return custom_files_.size();
}
inline void CreateParams::clear_custom_files() {
  custom_files_.Clear();
}
inline ::inference::CreateParams_File* CreateParams::mutable_custom_files(int index) {
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.custom_files)
  return custom_files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >*
CreateParams::mutable_custom_files() {
  // @@protoc_insertion_point(field_mutable_list:inference.CreateParams.custom_files)
  return &custom_files_;
}
inline const ::inference::CreateParams_File& CreateParams::custom_files(int index) const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.custom_files)
  return custom_files_.Get(index);
}
inline ::inference::CreateParams_File* CreateParams::add_custom_files() {
  // @@protoc_insertion_point(field_add:inference.CreateParams.custom_files)
  return custom_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inference::CreateParams_File >&
CreateParams::custom_files() const {
  // @@protoc_insertion_point(field_list:inference.CreateParams.custom_files)
  return custom_files_;
}

// optional string custom_params = 12;
inline bool CreateParams::has_custom_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateParams::set_has_custom_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateParams::clear_has_custom_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateParams::clear_custom_params() {
  custom_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_params();
}
inline const ::std::string& CreateParams::custom_params() const {
  // @@protoc_insertion_point(field_get:inference.CreateParams.custom_params)
  return custom_params_.GetNoArena();
}
inline void CreateParams::set_custom_params(const ::std::string& value) {
  set_has_custom_params();
  custom_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.CreateParams.custom_params)
}
#if LANG_CXX11
inline void CreateParams::set_custom_params(::std::string&& value) {
  set_has_custom_params();
  custom_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.CreateParams.custom_params)
}
#endif
inline void CreateParams::set_custom_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_params();
  custom_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.CreateParams.custom_params)
}
inline void CreateParams::set_custom_params(const char* value, size_t size) {
  set_has_custom_params();
  custom_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.CreateParams.custom_params)
}
inline ::std::string* CreateParams::mutable_custom_params() {
  set_has_custom_params();
  // @@protoc_insertion_point(field_mutable:inference.CreateParams.custom_params)
  return custom_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateParams::release_custom_params() {
  // @@protoc_insertion_point(field_release:inference.CreateParams.custom_params)
  if (!has_custom_params()) {
    return NULL;
  }
  clear_has_custom_params();
  return custom_params_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateParams::set_allocated_custom_params(::std::string* custom_params) {
  if (custom_params != NULL) {
    set_has_custom_params();
  } else {
    clear_has_custom_params();
  }
  custom_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_params);
  // @@protoc_insertion_point(field_set_allocated:inference.CreateParams.custom_params)
}

// -------------------------------------------------------------------

// InferenceRequest_RequestData

// optional string uri = 1;
inline bool InferenceRequest_RequestData::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InferenceRequest_RequestData::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InferenceRequest_RequestData::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InferenceRequest_RequestData::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& InferenceRequest_RequestData::uri() const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.RequestData.uri)
  return uri_.GetNoArena();
}
inline void InferenceRequest_RequestData::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.RequestData.uri)
}
#if LANG_CXX11
inline void InferenceRequest_RequestData::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceRequest.RequestData.uri)
}
#endif
inline void InferenceRequest_RequestData::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceRequest.RequestData.uri)
}
inline void InferenceRequest_RequestData::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceRequest.RequestData.uri)
}
inline ::std::string* InferenceRequest_RequestData::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.RequestData.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceRequest_RequestData::release_uri() {
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.RequestData.uri)
  if (!has_uri()) {
    return NULL;
  }
  clear_has_uri();
  return uri_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceRequest_RequestData::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.RequestData.uri)
}

// optional string attribute = 2;
inline bool InferenceRequest_RequestData::has_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InferenceRequest_RequestData::set_has_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InferenceRequest_RequestData::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InferenceRequest_RequestData::clear_attribute() {
  attribute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attribute();
}
inline const ::std::string& InferenceRequest_RequestData::attribute() const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.RequestData.attribute)
  return attribute_.GetNoArena();
}
inline void InferenceRequest_RequestData::set_attribute(const ::std::string& value) {
  set_has_attribute();
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.RequestData.attribute)
}
#if LANG_CXX11
inline void InferenceRequest_RequestData::set_attribute(::std::string&& value) {
  set_has_attribute();
  attribute_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceRequest.RequestData.attribute)
}
#endif
inline void InferenceRequest_RequestData::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute();
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceRequest.RequestData.attribute)
}
inline void InferenceRequest_RequestData::set_attribute(const char* value, size_t size) {
  set_has_attribute();
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceRequest.RequestData.attribute)
}
inline ::std::string* InferenceRequest_RequestData::mutable_attribute() {
  set_has_attribute();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.RequestData.attribute)
  return attribute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceRequest_RequestData::release_attribute() {
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.RequestData.attribute)
  if (!has_attribute()) {
    return NULL;
  }
  clear_has_attribute();
  return attribute_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceRequest_RequestData::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.RequestData.attribute)
}

// optional bytes body = 3;
inline bool InferenceRequest_RequestData::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InferenceRequest_RequestData::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InferenceRequest_RequestData::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InferenceRequest_RequestData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& InferenceRequest_RequestData::body() const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.RequestData.body)
  return body_.GetNoArena();
}
inline void InferenceRequest_RequestData::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.RequestData.body)
}
#if LANG_CXX11
inline void InferenceRequest_RequestData::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceRequest.RequestData.body)
}
#endif
inline void InferenceRequest_RequestData::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceRequest.RequestData.body)
}
inline void InferenceRequest_RequestData::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceRequest.RequestData.body)
}
inline ::std::string* InferenceRequest_RequestData::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.RequestData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceRequest_RequestData::release_body() {
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.RequestData.body)
  if (!has_body()) {
    return NULL;
  }
  clear_has_body();
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceRequest_RequestData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.RequestData.body)
}

// -------------------------------------------------------------------

// InferenceRequest

// optional .inference.InferenceRequest.RequestData data = 1;
inline bool InferenceRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InferenceRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InferenceRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InferenceRequest::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
inline const ::inference::InferenceRequest_RequestData& InferenceRequest::_internal_data() const {
  return *data_;
}
inline const ::inference::InferenceRequest_RequestData& InferenceRequest::data() const {
  const ::inference::InferenceRequest_RequestData* p = data_;
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.data)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::InferenceRequest_RequestData*>(
      &::inference::_InferenceRequest_RequestData_default_instance_);
}
inline ::inference::InferenceRequest_RequestData* InferenceRequest::release_data() {
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.data)
  clear_has_data();
  ::inference::InferenceRequest_RequestData* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::inference::InferenceRequest_RequestData* InferenceRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::inference::InferenceRequest_RequestData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.data)
  return data_;
}
inline void InferenceRequest::set_allocated_data(::inference::InferenceRequest_RequestData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.data)
}

// repeated .inference.InferenceRequest.RequestData datas = 2;
inline int InferenceRequest::datas_size() const {
  return datas_.size();
}
inline void InferenceRequest::clear_datas() {
  datas_.Clear();
}
inline ::inference::InferenceRequest_RequestData* InferenceRequest::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.datas)
  return datas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest_RequestData >*
InferenceRequest::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:inference.InferenceRequest.datas)
  return &datas_;
}
inline const ::inference::InferenceRequest_RequestData& InferenceRequest::datas(int index) const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.datas)
  return datas_.Get(index);
}
inline ::inference::InferenceRequest_RequestData* InferenceRequest::add_datas() {
  // @@protoc_insertion_point(field_add:inference.InferenceRequest.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest_RequestData >&
InferenceRequest::datas() const {
  // @@protoc_insertion_point(field_list:inference.InferenceRequest.datas)
  return datas_;
}

// optional string params = 3;
inline bool InferenceRequest::has_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InferenceRequest::set_has_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InferenceRequest::clear_has_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InferenceRequest::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
inline const ::std::string& InferenceRequest::params() const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequest.params)
  return params_.GetNoArena();
}
inline void InferenceRequest::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceRequest.params)
}
#if LANG_CXX11
inline void InferenceRequest::set_params(::std::string&& value) {
  set_has_params();
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceRequest.params)
}
#endif
inline void InferenceRequest::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceRequest.params)
}
inline void InferenceRequest::set_params(const char* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceRequest.params)
}
inline ::std::string* InferenceRequest::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequest.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceRequest::release_params() {
  // @@protoc_insertion_point(field_release:inference.InferenceRequest.params)
  if (!has_params()) {
    return NULL;
  }
  clear_has_params();
  return params_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceRequest::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceRequest.params)
}

// -------------------------------------------------------------------

// InferenceRequests

// repeated .inference.InferenceRequest requests = 1;
inline int InferenceRequests::requests_size() const {
  return requests_.size();
}
inline void InferenceRequests::clear_requests() {
  requests_.Clear();
}
inline ::inference::InferenceRequest* InferenceRequests::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:inference.InferenceRequests.requests)
  return requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest >*
InferenceRequests::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:inference.InferenceRequests.requests)
  return &requests_;
}
inline const ::inference::InferenceRequest& InferenceRequests::requests(int index) const {
  // @@protoc_insertion_point(field_get:inference.InferenceRequests.requests)
  return requests_.Get(index);
}
inline ::inference::InferenceRequest* InferenceRequests::add_requests() {
  // @@protoc_insertion_point(field_add:inference.InferenceRequests.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inference::InferenceRequest >&
InferenceRequests::requests() const {
  // @@protoc_insertion_point(field_list:inference.InferenceRequests.requests)
  return requests_;
}

// -------------------------------------------------------------------

// InferenceResponse

// optional int32 code = 1;
inline bool InferenceResponse::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InferenceResponse::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InferenceResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InferenceResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 InferenceResponse::code() const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.code)
  return code_;
}
inline void InferenceResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.code)
}

// optional string message = 2;
inline bool InferenceResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InferenceResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InferenceResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InferenceResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& InferenceResponse::message() const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.message)
  return message_.GetNoArena();
}
inline void InferenceResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.message)
}
#if LANG_CXX11
inline void InferenceResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceResponse.message)
}
#endif
inline void InferenceResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceResponse.message)
}
inline void InferenceResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceResponse.message)
}
inline ::std::string* InferenceResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceResponse::release_message() {
  // @@protoc_insertion_point(field_release:inference.InferenceResponse.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceResponse.message)
}

// optional string result = 5;
inline bool InferenceResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InferenceResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InferenceResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InferenceResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result();
}
inline const ::std::string& InferenceResponse::result() const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.result)
  return result_.GetNoArena();
}
inline void InferenceResponse::set_result(const ::std::string& value) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.result)
}
#if LANG_CXX11
inline void InferenceResponse::set_result(::std::string&& value) {
  set_has_result();
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceResponse.result)
}
#endif
inline void InferenceResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceResponse.result)
}
inline void InferenceResponse::set_result(const char* value, size_t size) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceResponse.result)
}
inline ::std::string* InferenceResponse::mutable_result() {
  set_has_result();
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceResponse::release_result() {
  // @@protoc_insertion_point(field_release:inference.InferenceResponse.result)
  if (!has_result()) {
    return NULL;
  }
  clear_has_result();
  return result_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    set_has_result();
  } else {
    clear_has_result();
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceResponse.result)
}

// optional bytes body = 6;
inline bool InferenceResponse::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InferenceResponse::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InferenceResponse::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InferenceResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& InferenceResponse::body() const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponse.body)
  return body_.GetNoArena();
}
inline void InferenceResponse::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.InferenceResponse.body)
}
#if LANG_CXX11
inline void InferenceResponse::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.InferenceResponse.body)
}
#endif
inline void InferenceResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.InferenceResponse.body)
}
inline void InferenceResponse::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.InferenceResponse.body)
}
inline ::std::string* InferenceResponse::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InferenceResponse::release_body() {
  // @@protoc_insertion_point(field_release:inference.InferenceResponse.body)
  if (!has_body()) {
    return NULL;
  }
  clear_has_body();
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InferenceResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:inference.InferenceResponse.body)
}

// -------------------------------------------------------------------

// InferenceResponses

// repeated .inference.InferenceResponse responses = 1;
inline int InferenceResponses::responses_size() const {
  return responses_.size();
}
inline void InferenceResponses::clear_responses() {
  responses_.Clear();
}
inline ::inference::InferenceResponse* InferenceResponses::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:inference.InferenceResponses.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::inference::InferenceResponse >*
InferenceResponses::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:inference.InferenceResponses.responses)
  return &responses_;
}
inline const ::inference::InferenceResponse& InferenceResponses::responses(int index) const {
  // @@protoc_insertion_point(field_get:inference.InferenceResponses.responses)
  return responses_.Get(index);
}
inline ::inference::InferenceResponse* InferenceResponses::add_responses() {
  // @@protoc_insertion_point(field_add:inference.InferenceResponses.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::inference::InferenceResponse >&
InferenceResponses::responses() const {
  // @@protoc_insertion_point(field_list:inference.InferenceResponses.responses)
  return responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inference

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_inference_2eproto
